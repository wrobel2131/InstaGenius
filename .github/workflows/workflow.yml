name: Workflow for project
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main
      - dev

permissions:
  pull-requests: read
jobs:
  pr-check:
    name: Check Source Branch If Can Push To Main or Dev
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check Source Branch
        run: |
          source_branch=${{ github.head_ref }}
          target_branch=${{ github.base_ref }}

          if [ "$target_branch" == "main" ]; then
            allowed_patterns="^release/|^hotfix/"
            error_message="Error: For 'main' branch, source branch must be 'release/*' or 'hotfix/*'"
          elif [ "$target_branch" == "dev" ]; then
            allowed_patterns="^hotfix/|^feature/"
            error_message="Error: For 'dev' branch, source branch must be 'hotfix/*' or 'feature/*'"
          else
            echo "Target branch is neither 'main' nor 'dev'. No validation needed."
            exit 0
          fi

          if echo "$source_branch" | grep -E "$allowed_patterns" > /dev/null; then
            echo "Valid branch name, job succeeded"
          else
            echo "$error_message"
            exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - config-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: maven
      - name: 'Debug: Print current directory'
        run: pwd
      - name: 'Debug: List files in repository root'
        run: ls -la
      - name: 'Debug: List all files in service directory'
        run: |
          cd ${{ matrix.service}}
          ls -la

      - name: Build with Maven
        run: |
          cd ${{ matrix.service }}
          mvn -B package --file pom.xml
      - name: Run unit tests
        run: |
          cd ${{ matrix.service }}
          mvn test
  analyze:
    name: Analyze with SonarCloud
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            -Dsonar.projectKey=wrobel2131_InstaGenius
            -Dsonar.organization=wrobel2131
          projectBaseDir: .
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      - name: Deploy
        run: echo "Deploying application..."
#  release:
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#    needs: deploy
#    permissions:
#      contents: write
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: 21
#          distribution: 'temurin'
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml
#      - name: Extract version from pom.xml
#        id: extract_version
#        run: |
#          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
#          echo "VERSION=${VERSION}" >> $GITHUB_ENV
#      - name: Check if tag already exists
#        id: check_tag
#        run: |
#          TAG="v${{ env.VERSION }}"
#          EXISTING_TAG=$(git tag -l "${TAG}")
#          if [ -n "${EXISTING_TAG}" ]; then
#            echo "Tag ${TAG} already exists. Skipping tag creation and release."
#            echo "TAG_EXISTS=true" >> $GITHUB_ENV
#          else
#            echo "TAG_EXISTS=false" >> $GITHUB_ENV
#          fi
#      - name: Create Tag
#        if: env.TAG_EXISTS == 'false'
#        id: create_tag
#        run: |
#          echo "Tag does not exist, let's create the tag v${{ env.VERSION }}"
#          TAG="v${{ env.VERSION }}"
#          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
#          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
#          git tag -a "${TAG}" -m "Release ${TAG}"
#          git push origin "${TAG}"
#          echo "TAG=${TAG}" >> $GITHUB_ENV
#      - name: Create Release
#        if: env.TAG_EXISTS == 'false'
#        id: create_release
#        run: |
#          echo "Let's create release for tag: ${{env.TAG}}"
#          gh release create "${TAG}" --verify-tag=true --latest=true --title "Release ${TAG}" --generate-notes=true  ./target/*.jar
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}